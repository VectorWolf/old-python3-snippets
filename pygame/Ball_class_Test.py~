import sys, pygame, time
pygame.init()

start_time = time.time()

size = width, height = 666, 450
color = 40, 20, 20

screen = pygame.display.set_mode(size)

clock = pygame.time.Clock()

class BounceObj:
    __oblist = []
    
    def __init__(self, pic, x, y, xspeed, yspeed):
        self.obj = pygame.image.load(pic)
        self.rect = self.obj.get_rect()
        self.speed = [xspeed,yspeed]
        self.rect.top = y
        self.rect.left = x
        
        type(self).__oblist.append(self)
        
    def GetOblist():
        return BounceObj.__oblist
        
    def UpdatePos(self):
        self.rect = self.rect.move(self.speed)
        
        if self.rect.left < 0 and self.speed[0] < 0:
            self.speed[0] = -self.speed[0]
            
        if self.rect.right > width and self.speed[0] > 0:
            self.speed[0] = -self.speed[0]
            
        if self.rect.top < 0 and self.speed[1] < 0:
            self.speed[1] = -self.speed[1]
            
        if self.rect.bottom > height and self.speed[1] > 0:
            self.speed[1] = -self.speed[1]

arsch = BounceObj("eckball.png",300,20,13,13)

arsch2 = BounceObj("ball.png",1,20,13,13)

arsch3 = BounceObj("paddel.png",2,20,13,13)

arsch4 = BounceObj("eckball.png",3,20,13,13)

arsch5 = BounceObj("paddel.png",4,20,13,13)

arsch6 = BounceObj("ball.png",5,20,13,13)

arsch7 = BounceObj("eckball.png",6,20,13,13)

arsch8 = BounceObj("eckball.png",7,20,13,13)

arsch9 = BounceObj("ball.png",8,20,13,13)

pimmel = BounceObj("eckball.png",300,300,-13,-13)

sack = BounceObj("ball.png",550,100,-12,13)

sack = BounceObj("eckball.png",450,100, 12,-13)

sack = BounceObj("paddel.png",350,100,-13,12)

sack = BounceObj("eckball.png",250,100,11,-12)

anal = BounceObj("Dick.gif",100,100,12,-11)

rektal = BounceObj("Dick.gif",400,200,11,-12)

while True:
  
    clock.tick(120) 
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT: sys.exit()
        
    oblist=BounceObj.GetOblist()          
            
    for i in range(len(oblist)):
        for j in range(i+1, len(oblist)):
            if oblist[i].rect.colliderect(oblist[j].rect):            
                ballho = set(range(oblist[i].rect.top,oblist[i].rect.bottom))
                ballbr = set(range(oblist[i].rect.left,oblist[i].rect.right))
                ball2ho = set(range(oblist[j].rect.top,oblist[j].rect.bottom))
                ball2br = set(range(oblist[j].rect.left,oblist[j].rect.right))
                
                avballho = sum(ballho)/len(ballho)
                avballbr = sum(ballbr)/len(ballbr)
                avball2ho = sum(ball2ho)/len(ball2ho)
                avball2br = sum(ball2br)/len(ball2br)                
                
                if len(ballho.intersection(ball2ho)) > len(ballbr.intersection(ball2br)):

                    if avballbr < avball2br and oblist[i].speed[0] > 0 or avballbr > avball2br and oblist[i].speed[0] < 0:
                        oblist[i].speed[0] = -oblist[i].speed[0]
                        
                    if avballbr < avball2br and oblist[j].speed[0] < 0 or avballbr > avball2br and oblist[j].speed[0] > 0:
                        oblist[j].speed[0] = -oblist[j].speed[0]
                        
                else:
                
                    if avballho < avball2ho and oblist[i].speed[1] > 0 or avballho > avball2ho and oblist[i].speed[1] < 0:
                        oblist[i].speed[1] = -oblist[i].speed[1]
                        
                    if avballho < avball2ho and oblist[i].speed[1] < 0 or avballho > avball2ho and oblist[i].speed[1] > 0:
                        oblist[j].speed[1] = -oblist[j].speed[1]                
        
    for i in oblist:
        i.UpdatePos()
        
    screen.fill(color)
        
    for i in oblist:
        screen.blit(i.obj, i.rect)
    
    pygame.display.flip()
